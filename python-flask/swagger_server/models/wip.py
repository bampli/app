# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.facility import Facility  # noqa: F401,E501
from swagger_server import util


class Wip(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, wip: str=None, name: str=None, last_modified: datetime=None, facility: Facility=None):  # noqa: E501
        """Wip - a model defined in Swagger

        :param wip: The wip of this Wip.  # noqa: E501
        :type wip: str
        :param name: The name of this Wip.  # noqa: E501
        :type name: str
        :param last_modified: The last_modified of this Wip.  # noqa: E501
        :type last_modified: datetime
        :param facility: The facility of this Wip.  # noqa: E501
        :type facility: Facility
        """
        self.swagger_types = {
            'wip': str,
            'name': str,
            'last_modified': datetime,
            'facility': Facility
        }

        self.attribute_map = {
            'wip': 'wip',
            'name': 'name',
            'last_modified': 'lastModified',
            'facility': 'facility'
        }
        self._wip = wip
        self._name = name
        self._last_modified = last_modified
        self._facility = facility

    @classmethod
    def from_dict(cls, dikt) -> 'Wip':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Wip of this Wip.  # noqa: E501
        :rtype: Wip
        """
        return util.deserialize_model(dikt, cls)

    @property
    def wip(self) -> str:
        """Gets the wip of this Wip.


        :return: The wip of this Wip.
        :rtype: str
        """
        return self._wip

    @wip.setter
    def wip(self, wip: str):
        """Sets the wip of this Wip.


        :param wip: The wip of this Wip.
        :type wip: str
        """
        if wip is None:
            raise ValueError("Invalid value for `wip`, must not be `None`")  # noqa: E501

        self._wip = wip

    @property
    def name(self) -> str:
        """Gets the name of this Wip.


        :return: The name of this Wip.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Wip.


        :param name: The name of this Wip.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def last_modified(self) -> datetime:
        """Gets the last_modified of this Wip.


        :return: The last_modified of this Wip.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: datetime):
        """Sets the last_modified of this Wip.


        :param last_modified: The last_modified of this Wip.
        :type last_modified: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def facility(self) -> Facility:
        """Gets the facility of this Wip.


        :return: The facility of this Wip.
        :rtype: Facility
        """
        return self._facility

    @facility.setter
    def facility(self, facility: Facility):
        """Sets the facility of this Wip.


        :param facility: The facility of this Wip.
        :type facility: Facility
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility
