# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Facility(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, facility: str=None, name: str=None, active: bool=True, company: str=None):  # noqa: E501
        """Facility - a model defined in Swagger

        :param facility: The facility of this Facility.  # noqa: E501
        :type facility: str
        :param name: The name of this Facility.  # noqa: E501
        :type name: str
        :param active: The active of this Facility.  # noqa: E501
        :type active: bool
        :param company: The company of this Facility.  # noqa: E501
        :type company: str
        """
        self.swagger_types = {
            'facility': str,
            'name': str,
            'active': bool,
            'company': str
        }

        self.attribute_map = {
            'facility': 'facility',
            'name': 'name',
            'active': 'active',
            'company': 'company'
        }
        self._facility = facility
        self._name = name
        self._active = active
        self._company = company

    @classmethod
    def from_dict(cls, dikt) -> 'Facility':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Facility of this Facility.  # noqa: E501
        :rtype: Facility
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facility(self) -> str:
        """Gets the facility of this Facility.

        Auto-generated primary key field  # noqa: E501

        :return: The facility of this Facility.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility: str):
        """Sets the facility of this Facility.

        Auto-generated primary key field  # noqa: E501

        :param facility: The facility of this Facility.
        :type facility: str
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility

    @property
    def name(self) -> str:
        """Gets the name of this Facility.


        :return: The name of this Facility.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Facility.


        :param name: The name of this Facility.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def active(self) -> bool:
        """Gets the active of this Facility.


        :return: The active of this Facility.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Facility.


        :param active: The active of this Facility.
        :type active: bool
        """

        self._active = active

    @property
    def company(self) -> str:
        """Gets the company of this Facility.

        This property is a reference to a Company  # noqa: E501

        :return: The company of this Facility.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this Facility.

        This property is a reference to a Company  # noqa: E501

        :param company: The company of this Facility.
        :type company: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")  # noqa: E501

        self._company = company
