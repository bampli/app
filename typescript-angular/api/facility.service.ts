/**
 * bampli-api
 * The API for the Business Amplifier project.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: josemotta@bampli.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Facility } from '../model/facility';
import { Wip } from '../model/wip';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FacilityService {

    protected basePath = 'https://virtserver.swaggerhub.com/motta/bampli/1.0.0-oas3';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Facility
     * Adds a Facility
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFacility(body: Facility, observe?: 'body', reportProgress?: boolean): Observable<Facility>;
    public addFacility(body: Facility, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Facility>>;
    public addFacility(body: Facility, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Facility>>;
    public addFacility(body: Facility, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addFacility.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Facility>('post',`${this.basePath}/facility/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Wip
     * Adds a Wip
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addWip(body: Wip, observe?: 'body', reportProgress?: boolean): Observable<Wip>;
    public addWip(body: Wip, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Wip>>;
    public addWip(body: Wip, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Wip>>;
    public addWip(body: Wip, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addWip.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Wip>('post',`${this.basePath}/wip/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Facility
     * Deletes a Facility
     * @param facilityid Identifier of the Facility
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFacility(facilityid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteFacility(facilityid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteFacility(facilityid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteFacility(facilityid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (facilityid === null || facilityid === undefined) {
            throw new Error('Required parameter facilityid was null or undefined when calling deleteFacility.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/facility/${encodeURIComponent(String(facilityid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Wip
     * Deletes a Wip
     * @param wipid Identifier of the Wip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWip(wipid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWip(wipid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWip(wipid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWip(wipid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wipid === null || wipid === undefined) {
            throw new Error('Required parameter wipid was null or undefined when calling deleteWip.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/wip/${encodeURIComponent(String(wipid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Facility
     * Loads a Facility
     * @param facilityid Identifier of the Facility
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFacility(facilityid: string, observe?: 'body', reportProgress?: boolean): Observable<Facility>;
    public getFacility(facilityid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Facility>>;
    public getFacility(facilityid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Facility>>;
    public getFacility(facilityid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (facilityid === null || facilityid === undefined) {
            throw new Error('Required parameter facilityid was null or undefined when calling getFacility.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Facility>('get',`${this.basePath}/facility/${encodeURIComponent(String(facilityid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Wip
     * Loads a Wip
     * @param wipid Identifier of the Wip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWip(wipid: string, observe?: 'body', reportProgress?: boolean): Observable<Wip>;
    public getWip(wipid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Wip>>;
    public getWip(wipid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Wip>>;
    public getWip(wipid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wipid === null || wipid === undefined) {
            throw new Error('Required parameter wipid was null or undefined when calling getWip.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Wip>('get',`${this.basePath}/wip/${encodeURIComponent(String(wipid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Facilities
     * Loads list of Facilities
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;name ASC,city DESC
     * @param name Allows to filter the collections of result by name
     * @param company Allows to filter the collections of result by company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchFacility(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Facility>>;
    public searchFacility(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Facility>>>;
    public searchFacility(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Facility>>>;
    public searchFacility(size?: number, page?: number, sort?: string, name?: string, company?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (company !== undefined && company !== null) {
            queryParameters = queryParameters.set('company', <any>company);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Facility>>('get',`${this.basePath}/facility/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Wips
     * Loads list of Wips
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;name ASC,city DESC
     * @param name Allows to filter the collections of result by name
     * @param facility Allows to filter the collections of result by facility
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchWips(size?: number, page?: number, sort?: string, name?: string, facility?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Wip>>;
    public searchWips(size?: number, page?: number, sort?: string, name?: string, facility?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Wip>>>;
    public searchWips(size?: number, page?: number, sort?: string, name?: string, facility?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Wip>>>;
    public searchWips(size?: number, page?: number, sort?: string, name?: string, facility?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (facility !== undefined && facility !== null) {
            queryParameters = queryParameters.set('facility', <any>facility);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Wip>>('get',`${this.basePath}/wip/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Facility
     * Stores a Facility
     * @param body 
     * @param facilityid Identifier of the Facility
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateFacility(body: Facility, facilityid: string, observe?: 'body', reportProgress?: boolean): Observable<Facility>;
    public updateFacility(body: Facility, facilityid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Facility>>;
    public updateFacility(body: Facility, facilityid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Facility>>;
    public updateFacility(body: Facility, facilityid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateFacility.');
        }

        if (facilityid === null || facilityid === undefined) {
            throw new Error('Required parameter facilityid was null or undefined when calling updateFacility.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Facility>('put',`${this.basePath}/facility/${encodeURIComponent(String(facilityid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Wip
     * Stores a Wip
     * @param body 
     * @param wipid Identifier of the Wip
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWip(body: Wip, wipid: string, observe?: 'body', reportProgress?: boolean): Observable<Wip>;
    public updateWip(body: Wip, wipid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Wip>>;
    public updateWip(body: Wip, wipid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Wip>>;
    public updateWip(body: Wip, wipid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateWip.');
        }

        if (wipid === null || wipid === undefined) {
            throw new Error('Required parameter wipid was null or undefined when calling updateWip.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Wip>('put',`${this.basePath}/wip/${encodeURIComponent(String(wipid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
