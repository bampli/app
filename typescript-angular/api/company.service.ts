/**
 * bampli-api
 * The API for the Business Amplifier project.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: josemotta@bampli.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Company } from '../model/company';
import { Product } from '../model/product';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CompanyService {

    protected basePath = 'https://virtserver.swaggerhub.com/motta/bampli/1.0.0-oas3';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Company
     * Adds a Company
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCompany(body: Company, observe?: 'body', reportProgress?: boolean): Observable<Company>;
    public addCompany(body: Company, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Company>>;
    public addCompany(body: Company, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Company>>;
    public addCompany(body: Company, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addCompany.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Company>('post',`${this.basePath}/company/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Product
     * Adds a Product
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addProduct(body: Product, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public addProduct(body: Product, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public addProduct(body: Product, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public addProduct(body: Product, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addProduct.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Product>('post',`${this.basePath}/product/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Company
     * Deletes a Company
     * @param companyid Identifier of the Company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCompany(companyid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCompany(companyid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCompany(companyid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCompany(companyid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (companyid === null || companyid === undefined) {
            throw new Error('Required parameter companyid was null or undefined when calling deleteCompany.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/company/${encodeURIComponent(String(companyid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Product
     * Deletes a Product
     * @param productid Identifier of the Product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProduct(productid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProduct(productid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProduct(productid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProduct(productid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (productid === null || productid === undefined) {
            throw new Error('Required parameter productid was null or undefined when calling deleteProduct.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/product/${encodeURIComponent(String(productid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Company
     * Loads a Company
     * @param companyid Identifier of the Company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompany(companyid: string, observe?: 'body', reportProgress?: boolean): Observable<Company>;
    public getCompany(companyid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Company>>;
    public getCompany(companyid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Company>>;
    public getCompany(companyid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (companyid === null || companyid === undefined) {
            throw new Error('Required parameter companyid was null or undefined when calling getCompany.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Company>('get',`${this.basePath}/company/${encodeURIComponent(String(companyid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Product
     * Loads a Product
     * @param productid Identifier of the Product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProduct(productid: string, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public getProduct(productid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public getProduct(productid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public getProduct(productid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (productid === null || productid === undefined) {
            throw new Error('Required parameter productid was null or undefined when calling getProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Product>('get',`${this.basePath}/product/${encodeURIComponent(String(productid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Companies
     * Loads list of Companies
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;name ASC,city DESC
     * @param name Allows to filter the collections of result by the value of name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCompanies(size?: number, page?: number, sort?: string, name?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Company>>;
    public searchCompanies(size?: number, page?: number, sort?: string, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Company>>>;
    public searchCompanies(size?: number, page?: number, sort?: string, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Company>>>;
    public searchCompanies(size?: number, page?: number, sort?: string, name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Company>>('get',`${this.basePath}/company/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Products
     * Loads list of Products
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;name ASC,city DESC
     * @param name Allows to filter the collections of result by name
     * @param company Allows to filter the collections of result by company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProducts(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Product>>;
    public searchProducts(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Product>>>;
    public searchProducts(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Product>>>;
    public searchProducts(size?: number, page?: number, sort?: string, name?: string, company?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (company !== undefined && company !== null) {
            queryParameters = queryParameters.set('company', <any>company);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Product>>('get',`${this.basePath}/product/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Company
     * Stores a Company
     * @param body 
     * @param companyid Identifier of the Company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompany(body: Company, companyid: string, observe?: 'body', reportProgress?: boolean): Observable<Company>;
    public updateCompany(body: Company, companyid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Company>>;
    public updateCompany(body: Company, companyid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Company>>;
    public updateCompany(body: Company, companyid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateCompany.');
        }

        if (companyid === null || companyid === undefined) {
            throw new Error('Required parameter companyid was null or undefined when calling updateCompany.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Company>('put',`${this.basePath}/company/${encodeURIComponent(String(companyid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Product
     * Stores a Product
     * @param body 
     * @param productid Identifier of the Product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProduct(body: Product, productid: string, observe?: 'body', reportProgress?: boolean): Observable<Product>;
    public updateProduct(body: Product, productid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Product>>;
    public updateProduct(body: Product, productid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Product>>;
    public updateProduct(body: Product, productid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateProduct.');
        }

        if (productid === null || productid === undefined) {
            throw new Error('Required parameter productid was null or undefined when calling updateProduct.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Product>('put',`${this.basePath}/product/${encodeURIComponent(String(productid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
