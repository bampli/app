/**
 * bampli-api
 * The API for the Business Amplifier project.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: josemotta@bampli.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Cyclo } from '../model/cyclo';
import { Stage } from '../model/stage';
import { Task } from '../model/task';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CycloService {

    protected basePath = 'https://virtserver.swaggerhub.com/motta/bampli/1.0.0-oas3';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Cyclo
     * Adds a Cyclo
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCyclo(body: Cyclo, observe?: 'body', reportProgress?: boolean): Observable<Cyclo>;
    public addCyclo(body: Cyclo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cyclo>>;
    public addCyclo(body: Cyclo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cyclo>>;
    public addCyclo(body: Cyclo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addCyclo.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Cyclo>('post',`${this.basePath}/cyclo/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Stage
     * Adds a Stage
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addStage(body: Stage, observe?: 'body', reportProgress?: boolean): Observable<Stage>;
    public addStage(body: Stage, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Stage>>;
    public addStage(body: Stage, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Stage>>;
    public addStage(body: Stage, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addStage.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Stage>('post',`${this.basePath}/stage/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Task
     * Adds a Task
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTask(body: Task, observe?: 'body', reportProgress?: boolean): Observable<Task>;
    public addTask(body: Task, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Task>>;
    public addTask(body: Task, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Task>>;
    public addTask(body: Task, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addTask.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Task>('post',`${this.basePath}/task/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Cyclo
     * Deletes a Cyclo
     * @param cycloid Identifier of the Cyclo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCyclo(cycloid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCyclo(cycloid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCyclo(cycloid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCyclo(cycloid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cycloid === null || cycloid === undefined) {
            throw new Error('Required parameter cycloid was null or undefined when calling deleteCyclo.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/cyclo/${encodeURIComponent(String(cycloid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Stage
     * Deletes a Stage
     * @param stageid Identifier of the Stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteStage(stageid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteStage(stageid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteStage(stageid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteStage(stageid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stageid === null || stageid === undefined) {
            throw new Error('Required parameter stageid was null or undefined when calling deleteStage.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/stage/${encodeURIComponent(String(stageid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Task
     * Deletes a Task
     * @param taskid Identifier of the Task
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTask(taskid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTask(taskid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTask(taskid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTask(taskid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskid === null || taskid === undefined) {
            throw new Error('Required parameter taskid was null or undefined when calling deleteTask.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/task/${encodeURIComponent(String(taskid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Cyclo
     * Loads a Cyclo
     * @param cycloid Identifier of the Cyclo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCyclo(cycloid: string, observe?: 'body', reportProgress?: boolean): Observable<Cyclo>;
    public getCyclo(cycloid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cyclo>>;
    public getCyclo(cycloid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cyclo>>;
    public getCyclo(cycloid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cycloid === null || cycloid === undefined) {
            throw new Error('Required parameter cycloid was null or undefined when calling getCyclo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Cyclo>('get',`${this.basePath}/cyclo/${encodeURIComponent(String(cycloid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Stage
     * Loads a Stage
     * @param stageid Identifier of the Stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStage(stageid: string, observe?: 'body', reportProgress?: boolean): Observable<Stage>;
    public getStage(stageid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Stage>>;
    public getStage(stageid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Stage>>;
    public getStage(stageid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (stageid === null || stageid === undefined) {
            throw new Error('Required parameter stageid was null or undefined when calling getStage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Stage>('get',`${this.basePath}/stage/${encodeURIComponent(String(stageid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load an individual Task
     * Loads a Task
     * @param taskid Identifier of the Task
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTask(taskid: string, observe?: 'body', reportProgress?: boolean): Observable<Task>;
    public getTask(taskid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Task>>;
    public getTask(taskid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Task>>;
    public getTask(taskid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskid === null || taskid === undefined) {
            throw new Error('Required parameter taskid was null or undefined when calling getTask.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Task>('get',`${this.basePath}/task/${encodeURIComponent(String(taskid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Cyclos
     * Loads list of Cyclos
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results.
     * @param name Allows to filter the collections of result by name
     * @param company Allows to filter the collections of result by company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchCyclos(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cyclo>>;
    public searchCyclos(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cyclo>>>;
    public searchCyclos(size?: number, page?: number, sort?: string, name?: string, company?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cyclo>>>;
    public searchCyclos(size?: number, page?: number, sort?: string, name?: string, company?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (company !== undefined && company !== null) {
            queryParameters = queryParameters.set('company', <any>company);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Cyclo>>('get',`${this.basePath}/cyclo/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Stages
     * Loads list of Stages
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;name ASC
     * @param name Allows to filter the collections of result by name
     * @param cyclo Allows to filter the collections of result by cyclo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchStages(size?: number, page?: number, sort?: string, name?: string, cyclo?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Stage>>;
    public searchStages(size?: number, page?: number, sort?: string, name?: string, cyclo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Stage>>>;
    public searchStages(size?: number, page?: number, sort?: string, name?: string, cyclo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Stage>>>;
    public searchStages(size?: number, page?: number, sort?: string, name?: string, cyclo?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (cyclo !== undefined && cyclo !== null) {
            queryParameters = queryParameters.set('cyclo', <any>cyclo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Stage>>('get',`${this.basePath}/stage/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load the list of Tasks
     * Loads list of Tasks
     * @param size Size of the page to retrieve.
     * @param page Number of the page to retrieve.
     * @param sort Order in which to retrieve the results. Multiple sort criteria can be passed. Example: sort&#x3D;name ASC,city DESC
     * @param name Allows to filter the collections of result by name
     * @param stage Allows to filter the collections of result by stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchTasks(size?: number, page?: number, sort?: string, name?: string, stage?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Task>>;
    public searchTasks(size?: number, page?: number, sort?: string, name?: string, stage?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Task>>>;
    public searchTasks(size?: number, page?: number, sort?: string, name?: string, stage?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Task>>>;
    public searchTasks(size?: number, page?: number, sort?: string, name?: string, stage?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('$size', <any>size);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('$page', <any>page);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('$sort', <any>sort);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (stage !== undefined && stage !== null) {
            queryParameters = queryParameters.set('stage', <any>stage);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Task>>('get',`${this.basePath}/task/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Cyclo
     * Stores a Cyclo
     * @param body 
     * @param cycloid Identifier of the Cyclo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCyclo(body: Cyclo, cycloid: string, observe?: 'body', reportProgress?: boolean): Observable<Cyclo>;
    public updateCyclo(body: Cyclo, cycloid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cyclo>>;
    public updateCyclo(body: Cyclo, cycloid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cyclo>>;
    public updateCyclo(body: Cyclo, cycloid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateCyclo.');
        }

        if (cycloid === null || cycloid === undefined) {
            throw new Error('Required parameter cycloid was null or undefined when calling updateCyclo.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Cyclo>('put',`${this.basePath}/cyclo/${encodeURIComponent(String(cycloid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Stage
     * Stores a Stage
     * @param body 
     * @param stageid Identifier of the Stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStage(body: Stage, stageid: string, observe?: 'body', reportProgress?: boolean): Observable<Stage>;
    public updateStage(body: Stage, stageid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Stage>>;
    public updateStage(body: Stage, stageid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Stage>>;
    public updateStage(body: Stage, stageid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateStage.');
        }

        if (stageid === null || stageid === undefined) {
            throw new Error('Required parameter stageid was null or undefined when calling updateStage.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Stage>('put',`${this.basePath}/stage/${encodeURIComponent(String(stageid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a Task
     * Stores a Task
     * @param body 
     * @param taskid Identifier of the Task
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTask(body: Task, taskid: string, observe?: 'body', reportProgress?: boolean): Observable<Task>;
    public updateTask(body: Task, taskid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Task>>;
    public updateTask(body: Task, taskid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Task>>;
    public updateTask(body: Task, taskid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateTask.');
        }

        if (taskid === null || taskid === undefined) {
            throw new Error('Required parameter taskid was null or undefined when calling updateTask.');
        }

        let headers = this.defaultHeaders;

        // authentication (HTTP_BASIC) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Task>('put',`${this.basePath}/task/${encodeURIComponent(String(taskid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
